---
apiVersion: v1
kind: Namespace
metadata:
  name: kube-catalog
---
apiVersion: v1
kind: Secret
metadata:
  name: service-catalog-apiserver-cert
  namespace: kube-catalog
  labels:
    app: service-catalog-apiserver
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWRENDQWp5Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwemRtTXQKWTJGMExXTmhNQjRYRFRFNE1EUXhPREF4TWpjMU9Gb1hEVEk0TURReE5UQXhNamMxT0Zvd0pERWlNQ0FHQTFVRQpBeE1aYzJWeWRtbGpaUzFqWVhSaGJHOW5MV0Z3YVhObGNuWmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTzV2OVkvNzJkYkZRcjZKaWdiZlJVZEF5aktpNmFXWXVRNXRJS0s0VTVaWURwOWcKZ0JiUEM0dFY2Q01sNXk1a0FUU3IxcktBK2ZSTnBiR1NXWFhUZU1RUTFRNFNpdVFRbXFZLzNMdVR0b3JIbDdKbQpVVFI0WFpVOFpYTnZjbHplbi9KbjJRN0lzRjlKa29OWEtwRllOT0RaeVZaTFdQQnhpRTJuSWdLMktTWnB2VW9ZCko5cURidUhuaTBxU2Y2akxzRFJUK2NZZ0V4QmVzbGc5TWM4MU9UeEpieHFaZ1lGNjZKN1ozVlJyZFpvdmJ3RkEKZ0lHWk5OeXZDQ01ZWStnZzZTYm54aFNsUzN5M0xRYS8vWHVyTWhJOTBhUnlpOGxua0FuK09xLy8vY0JiVWZ2NQpWalFVNnNlWkhySk1EWHRXdnRuOWZ4eE81OHZJRFhhUDIxbkpHYTBDQXdFQUFhT0JuekNCbkRBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdYUVlEVlIwUkJGWXdWSUltYzJWeWRtbGpaUzFqWVhSaGJHOW5MV0Z3YVhObGNuWmxjaTVyZFdKbApMV05oZEdGc2IyZUNLbk5sY25acFkyVXRZMkYwWVd4dlp5MWhjR2x6WlhKMlpYSXVhM1ZpWlMxallYUmhiRzluCkxuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBcXp2QkpUcUFJbG15Q0JicUIxcDQyemQwMWFTempxMHgKdEhGa2lZMzlLTDVtalAzUUZGUGdodlFleEpzdG1MU21ScHRuUVorV2ZBdVQyUUZZMjN2b2piWXo3dHlKc0cyTgorQjFmY0k5cE1zeGUzNHNxeXFkeVlyR1ZuS1E4eGJTR3JoZDFDMVJpY0o5S09laG16VHFzSFRqVnh5RmhUcGtzCndLeTBiaStFOUQzY3VSUGZ4am94NXpWZlRWcXByYU1kelZJaS9OUVhyOXpCamJDUVpOc1VzL2JSMHAwbHhHUlMKMVpLTnlFcHR0TERuQVZ0S0h6em9hdXdpVlVma1ZVN0dKQnAwRmZxc2ptUXJwQWJaUmRrT3ZrYng0SkFRcnlwUQo2cjF2dVZFQkhlOUxoeU1jR1RRaXhjTWFONHVob1VkQXdhRmhlZTVsbDdNZzRCQlJRQ3ZPYXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBN20vMWovdloxc1ZDdm9tS0J0OUZSMERLTXFMcHBaaTVEbTBnb3JoVGxsZ09uMkNBCkZzOExpMVhvSXlYbkxtUUJOS3ZXc29ENTlFMmxzWkpaZGRONHhCRFZEaEtLNUJDYXBqL2N1NU8yaXNlWHNtWlIKTkhoZGxUeGxjMjl5WE42ZjhtZlpEc2l3WDBtU2cxY3FrVmcwNE5uSlZrdFk4SEdJVGFjaUFyWXBKbW05U2hnbgoyb051NGVlTFNwSi9xTXV3TkZQNXhpQVRFRjZ5V0QweHp6VTVQRWx2R3BtQmdYcm9udG5kVkd0MW1pOXZBVUNBCmdaazAzSzhJSXhoajZDRHBKdWZHRktWTGZMY3RCci85ZTZzeUVqM1JwSEtMeVdlUUNmNDZyLy85d0Z0UisvbFcKTkJUcXg1a2Vza3dOZTFhKzJmMS9IRTdueThnTmRvL2JXY2taclFJREFRQUJBb0lCQUVNNE5SWitmZzlhVlZLNgpHN3VNUGsrMEtFeldPT0NDaWNsVFlwdjlNek56Wjh2dXZLMnhlU095K0ZyUVdMaHZZUmVrU2tiUXJhYitMUFErCnVoSEpxSVk5NkpLckQ1VDBTV1VOSkFHTnh5eWcwRmR2R1AyZDRXUXRQcnlvY3FsVDZldkE4eVNEMTVWRmZKU2kKZ2xHdmVGamJqVE5TMHFRV25jS21sNlFFRHQzUTdrVE8rWk0zNjF6anRNL3EvNTJJRVAyYjVmS01hY0NqdVJIagpxa2VSdzZYM3Rpd0dlVkdMZTFRMEh5Wm80WmZNZEZjT0pTRU9MTmNhcHFaa2lLU0x5Um5za25FSmdVTnhVdUlPCkQ5NWhtVUJMcTVFeCt2WVM4NFN0TmxEaEw2M01DUmhGZXEyS3NMODlZaVZ3Y1NpWU5nOGdFYlpHK0FmRkJNYkQKZmI1TEhWRUNnWUVBOHJEMTgra0ErUmxiUHF0SGF1bWsya25icmpEdldiL2pRRlI0ZVU3c0ZOc1IvU3RybUJZbwpNSzVjVGw2MDdEWnF2Nkx1d0RvWkNTWkFSbG9aRTZ0TUZ1TWhkRS80ODVCVHdTMC9JSWh6Sy9pTmRGU2pTeTh3ClNweEc5VWIxTmppQTVFT1FGSnlxRlBNaWZaa3MwSlh4RGtHN1lxTXNqbEhOU1lXbThrL09ha3NDZ1lFQSs0TkgKbEtCbm1YYjZXS2Qvb1BYTnJobEtUTkxYL0xISTlYVFNXanlkQWlIRURVb1FoTk5sbXhGNWs3RHVyaTVzT2tRUgoySFIxWkhMRWxWSThrY25TZUlMRWluR21ZWnY5SWhjQ2xROWFnSTg2bDR5eXd6djRTYy9xY05WS1pjYzB1bm93CnkyTWlYWWprV1I2ZzVHMGNHejBBaUs2cDRnQmR6SmNRcEVvWGtPY0NnWUFSS0JOckY4aTYwMkVROEJqUFpROEQKWTM5Rk5DNW5nTm8yM1FIYlNZb0UrMnV0SXhtckdiM2pteC9wWm1hUjRGTHhrem9mbXJ2VVdzRG1lRTRYaHQrTgpLcWRkeXAyRjBta3BXZUtCa1VQYkV1b2xGQ3FyRVAzditGWkgxcWxWR085N3M0OEc5Z0JNRk5nV1d2TEJHQ2gvCllvUTF0K1ZaZGt6MTZwM2Z1V2FWT3dLQmdRRFBobHU2bzd1M29iY2hEVnUrdVBKejg0UWQ3VjZ2cnhYc2llN0MKNi81MDh0MXNSYTlwbVcvZHlrWnhlVzBISldEQmxzYk92aERheCtPeWZYOWluNDlkUmpEYk5ya2RFdk9EZkU3eQpKUS84d2JHTHVGa0x4R0N5cnE1M1dWWWdzb1NzVlFRTDNZbE9laFJJQUlDcTJlaDJCUmg2cnZ1WGNjdnpjcllWCmlOajNBd0tCZ0Y0a0dtR1ErSFB6OFAvbFgxNXNGbWdYUTR4SFdnWHlyTTllSVFiUTVneENMYzVoRitqQ0p3a1IKdkJrN0pzZG5PSi9oK0dhK3cxQmtZWUIzZVkzYk55L21OaGdHRG9VYkZPZDFPNDloRlM1ekw2RnFxU2hSai9jbgp1YVdRbnJQdU1Sam1IQ0JVRktNOVg2VkxoK3BKUmFEQUhwV3JLZnFMUyt0MWsxSlM4NDl5Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
kind: Service
apiVersion: v1
metadata:
  name: service-catalog-apiserver
  namespace: kube-catalog
  labels:
    app: service-catalog-apiserver
spec:
  type: NodePort
  selector:
    app: service-catalog-apiserver
  ports:
  - name: secure
    protocol: TCP
    port: 443
    targetPort: 8443
    nodePort: 30443
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: service-catalog-apiserver
  namespace: kube-catalog
  labels:
    app: service-catalog-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-catalog-apiserver
  template:
    metadata:
      labels:
        app: service-catalog-apiserver
    spec:
      serviceAccountName: "service-catalog-apiserver"
      containers:
      - name: apiserver
        image: quay.io/kubernetes-service-catalog/service-catalog:v0.1.14
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
        args:
        - apiserver
        - --admission-control
        - "KubernetesNamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck"
        - --secure-port
        - "8443"
        - --storage-type
        - etcd
        - --etcd-servers
        - http://localhost:2379
        - -v
        - "10"
        ports:
        - containerPort: 8443
        volumeMounts:
        - name: apiserver-cert
          mountPath: /var/run/kubernetes-service-catalog
          readOnly: true
        readinessProbe:
          httpGet:
            port: 8443
            path: /healthz
            scheme: HTTPS
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            port: 8443
            path: /healthz
            scheme: HTTPS
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
      - name: etcd
        image: quay.io/coreos/etcd:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 30Mi
          limits:
            cpu: 100m
            memory: 40Mi
        env:
        - name: ETCD_DATA_DIR
          value: /etcd-data-dir
        command:
        - /usr/local/bin/etcd
        - --listen-client-urls
        - http://0.0.0.0:2379
        - --advertise-client-urls
        - http://localhost:2379
        ports:
        - containerPort: 2379
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /etcd-data-dir
        readinessProbe:
          httpGet:
            port: 2379
            path: /health
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            port: 2379
            path: /health
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
      volumes:
      - name: apiserver-cert
        secret:
          secretName: service-catalog-apiserver-cert
          items:
          - key: tls.crt
            path: apiserver.crt
          - key: tls.key
            path: apiserver.key
      - name: etcd-data-dir
        emptyDir: {}
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: service-catalog-controller-manager
  namespace: kube-catalog
  labels:
    app: service-catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-catalog-controller-manager
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "false"
      labels:
        app: service-catalog-controller-manager
    spec:
      serviceAccountName: "service-catalog-controller-manager"
      containers:
      - name: controller-manager
        image: quay.io/kubernetes-service-catalog/service-catalog:v0.1.14
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
        env:
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        args:
        - controller-manager
        - --secure-port
        - "8444"
        - "--leader-elect=false"
        - -v
        - "10"
        - --resync-interval
        - 5m
        - --broker-relist-interval
        - 24h
        ports:
        - containerPort: 8444
        volumeMounts:
        - name: service-catalog-cert
          mountPath: /var/run/kubernetes-service-catalog
          readOnly: true
        readinessProbe:
          httpGet:
            port: 8444
            path: /healthz
            scheme: HTTPS
          failureThreshold: 1
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            port: 8444
            path: /healthz
            scheme: HTTPS
          failureThreshold: 3
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
      volumes:
      - name: service-catalog-cert
        secret:
          secretName: service-catalog-apiserver-cert
          items:
          - key: tls.crt
            path: apiserver.crt
          - key: tls.key
            path: apiserver.key
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.servicecatalog.k8s.io
spec:
  group: servicecatalog.k8s.io
  version: v1beta1
  service:
    namespace: kube-catalog
    name: service-catalog-apiserver
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwemRtTXQKWTJGMExXTmhNQjRYRFRFNE1EUXhPREF4TWpjMU9Gb1hEVEk0TURReE5UQXhNamMxT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYzNaakxXTmhkQzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTjBzClhGZy9JUk5pNlZuZHBQK3B0NHM5MUpJYTQ2dG0xZVdWUDB3cktqVmtiajRwZTdLZG5USGZDdndtT0tJYmtjM00KV2dnSHdzVGp2WVlwaTl5TEpIbklqUmFBck1Xc0FMMUdZR1EzS21uUmJCVTJXWHhIZVBPanBBZDRROEdScGY0ZwpRV1JJdlpVeHI2UDdYV0t2SUg2OHozdkZDM3oralhmMnI4U2duNnRZMVQxSDM2ZEVobTBiVTVBWUdtNWMvWno0CmFtek9xN1BaWXZCS1RZR1Z6cWRmN0FJNElPRGZIaWNmODJqMGNRWlo1K0s4cjJmVE9XaVBkbndtMWxKT08xZVMKaUhmRzM5LzY5bUM3Qmx4Q0o3cXlFaWhvQUV0bkhaMEZ3dGVKbDExQWNmNGw4ZngyUWkzQ1UvZFZqc3hpTnozSQo4cmM1d3ZERzcwVE5Fd2g3V3FVQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFERUl1VW5vNVJoWWphR0JkbTVhcm42NHFZU3orcFpZTGJsdE04aXczekRXY2dKNU5aWAp6WTBhT1RlY2IvZ0lJL0sxTlF6Z2dLNmdaaDFjVlVXV2dJOEhkZFRISzd6WDNqRlZIdk9lVWRZci9pelhzTHJUCnB1Sk84cHJMOWxBaFRTMGdnOXZGRi9lU0pVVEZYQzMrWXF6RFRzdzRZM3FSNFJnMG5wVEI2YnN0U3VKZWNBMVUKalc0Y21KUUd1YlVxaUhlbkNPeGJlMWxxUEMrYkJjSU42bWdoWXFYeTMvNHd6R2FOeHI3SGZOSU0wZ21aZXdDagphb0lwOHRxdXdHRjlqNGQzemxwelJrOXByZGxYTVN4TUZxWnNIYUxZRFN6T05uYVRZaEUyWlloaFBCTkRyK3pXCmUxQlRXN3JyS1NpY0ZYcXFJbFBkZXF0bXVmWWlPQzhGeE9FbwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  groupPriorityMinimum: 10000
  versionPriority: 20
---
apiVersion: v1
kind: List
items:

### API Server ###

# TODO: if this is just for namespace lifecycle admission, move to a generic role
# the role for the apiserver
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "servicecatalog.k8s.io:apiserver"
  # this rule defined on the role for specifically the
  # namespace-lifecycle admission-controller
  rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs:     ["get", "list", "watch"]
# API-server service-account gets its own role
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:apiserver"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "service-catalog-apiserver"
    namespace: "kube-catalog"
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver-auth-delegator"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "service-catalog-apiserver"
    namespace: "kube-catalog"
# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# enable api aggregation
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver-authentication-reader"
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "service-catalog-apiserver"
    namespace: "kube-catalog"

### Controller-Manager ###

# controller-manager role defines what access the service-catalog
# controller-manager needs to manage the resources of the
# service-catalog
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: "servicecatalog.k8s.io:controller-manager"
  rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs:     ["create","patch","update"]
  # TODO: do not grant global access, limit to particular secrets referenced from servicebindings
  - apiGroups: [""]
    resources: ["secrets"]
    verbs:     ["get","create","update","delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs:     ["get","list","update", "patch", "watch", "delete", "initialize"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs:     ["get","list","watch"]
  # access to our service-catalog types
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["clusterserviceclasses"]
    verbs:     ["get","list","watch","create","patch","update","delete"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["clusterserviceplans"]
    verbs:     ["get","list","watch","create","patch","update","delete"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["clusterservicebrokers","serviceinstances","servicebindings"]
    verbs:     ["get","list","watch"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["clusterservicebrokers/status","clusterserviceclasses/status","clusterserviceplans/status","serviceinstances/status","serviceinstances/reference","servicebindings/status"]
    verbs:     ["update"]
# give the controller-manager service account access to whats defined in its role.
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:controller-manager"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:controller-manager"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "service-catalog-controller-manager"
    namespace: "kube-catalog"

# This gives create/update access to configmaps in deployment namespace for leader election
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: "servicecatalog.k8s.io:leader-locking-controller-manager"
    namespace: "kube-catalog"
  rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs:     ["create"]
  - apiGroups:     [""]
    resources:     ["configmaps"]
    resourceNames: ["service-catalog-controller-manager"]
    verbs:         ["get","update"]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: service-catalog-controller-manager
    namespace: "kube-catalog"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: "servicecatalog.k8s.io:leader-locking-controller-manager"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "service-catalog-controller-manager"
    namespace: "kube-catalog"
---
apiVersion: v1
kind: List
items:
  # The SA for the apiserver
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: "service-catalog-apiserver"
      namespace: "kube-catalog"
  # The SA for the controller-manager
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: "service-catalog-controller-manager"
      namespace: "kube-catalog"
